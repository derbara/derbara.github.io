const API_URL = 'https://edu.std-900.ist.mospolytech.ru/labs/api';
const API_KEY = '50c41ef5-a738-4f61-869e-0fa04dc0d8db';

document.addEventListener('DOMContentLoaded', async () => {
  const selectedIds = JSON.parse(localStorage.getItem('order')) || {};
  const orderItemsContainer = document.querySelector('.order-items');
  const summaryContainer = document.querySelector('.order-summary');
  const totalDisplay = document.querySelector('.total-price');
  const emptyMessage = document.querySelector('.empty-message');

  const labels = {
    soup: '–°—É–ø',
    'main-course': '–ì–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ',
    salad: '–°–∞–ª–∞—Ç',
    drink: '–ù–∞–ø–∏—Ç–æ–∫',
    dessert: '–î–µ—Å–µ—Ä—Ç'
  };

  let allDishes = [];

  try {
    const response = await fetch(`${API_URL}/dishes?api_key=${API_KEY}`);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥');
    allDishes = await response.json();
  } catch (error) {
    console.error(error);
    emptyMessage.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    emptyMessage.style.display = 'block';
    return;
  }

  const categories = ['soup', 'main-course', 'salad', 'drink', 'dessert'];
  let total = 0;

  categories.forEach(cat => {
    const dishId = selectedIds[cat];
    const dish = allDishes.find(d => d.id === dishId);

    const card = document.createElement('div');
    card.className = 'card';

    if (dish) {
      card.innerHTML = `
        <img src="${dish.image}" alt="${dish.name}">
        <div class="info">
          <p class="price">${dish.price} ‚ÇΩ</p>
          <p class="name">${dish.name}</p>
          <p class="weight">${dish.count}</p>
        </div>
        <button data-cat="${cat}">–£–¥–∞–ª–∏—Ç—å</button>
      `;
      total += dish.price;
    } else {
      card.innerHTML = `<p>${labels[cat]}: –ù–µ –≤—ã–±—Ä–∞–Ω–æ</p>`;
    }

    orderItemsContainer.appendChild(card);

    const line = document.createElement('div');
    line.className = 'order-line';
    line.textContent = dish
      ? `${labels[cat]}: ${dish.name} ${dish.price}‚ÇΩ`
      : `${labels[cat]}: –ù–µ –≤—ã–±—Ä–∞–Ω`;
    summaryContainer.appendChild(line);
  });

  totalDisplay.textContent = `–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total} ‚ÇΩ`;

  if (Object.keys(selectedIds).length === 0) {
    emptyMessage.style.display = 'block';
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
  orderItemsContainer.addEventListener('click', e => {
    if (e.target.tagName === 'BUTTON') {
      const cat = e.target.dataset.cat;
      delete selectedIds[cat];
      localStorage.setItem('order', JSON.stringify(selectedIds));
      location.reload();
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  document.querySelector('#orderForm').addEventListener('submit', async e => {
    e.preventDefault();

    const message = getMissingMessage(selectedIds);
    if (message) {
      showNotification(message);
      return;
    }

    const formData = new FormData(e.target);
    const payload = {
      full_name: formData.get('name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      delivery_address: formData.get('address'),
      delivery_type: formData.get('delivery_time_choice'),
      delivery_time: formData.get('delivery_time') || null,
      comment: formData.get('comments') || '',
      subscribe: formData.get('subscribe') ? 1 : 0,
      soup_id: selectedIds.soup || null,
      main_course_id: selectedIds['main-course'] || null,
      salad_id: selectedIds.salad || null,
      drink_id: selectedIds.drink || null,
      dessert_id: selectedIds.dessert || null
    };

    try {
      const response = await fetch(`${API_URL}/orders?api_key=${API_KEY}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');

      showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
      localStorage.removeItem('order');
      setTimeout(() => {
        window.location.href = 'index.html';
      }, 2000);
    } catch (error) {
      console.error(error);
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function getMissingMessage(order) {
  const hasSoup = 'soup' in order;
  const hasMain = 'main-course' in order;
  const hasSalad = 'salad' in order;
  const hasDrink = 'drink' in order;
  const hasDessert = 'dessert' in order;

  const totalSelected = Object.keys(order).length;

  if (totalSelected === 0) return '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞';
  if (!hasDrink) return '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫';
  if (hasSoup && !hasMain && !hasSalad) return '–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ/—Å–∞–ª–∞—Ç/—Å—Ç–∞—Ä—Ç–µ—Ä';
  if (hasSalad && !hasSoup && !hasMain) return '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ';
  if ((hasDrink || hasDessert) && !hasMain && !hasSoup) return '–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ';

  return null; // –ö–æ–º–±–æ –¥–æ–ø—É—Å—Ç–∏–º–æ
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message) {
  const existing = document.querySelector('.notification');
  if (existing) existing.remove();

  const overlay = document.createElement('div');
  overlay.className = 'notification';

  overlay.innerHTML = `
    <p>${message}</p>
    <button>–û–∫–µ–π üëå</button>
  `;

  document.body.appendChild(overlay);

  overlay.querySelector('button').addEventListener('click', () => {
    overlay.remove();
  });
}
